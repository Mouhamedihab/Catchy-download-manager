{"version":3,"file":"preload.js","mappings":"mBAAA,MAAM,EAA+BA,QAAQ,YCK7CC,QAAQC,IAAI,6CAEZ,EAAAC,cAAcC,kBAAkB,WAAY,CACxCC,YAAa,CACTC,KAAM,CAACC,KAAoBC,IAAgB,EAAAH,YAAYC,KAAKC,KAAYC,GACxEC,GAAI,CAACF,EAAiBG,KAClB,MAAMC,EAAe,CAACC,KAAgBJ,IAAgBE,KAAQF,GAG9D,OAFA,EAAAH,YAAYI,GAAGF,EAASI,GAEjB,KACH,EAAAN,YAAYQ,eAAeN,EAASI,EAAa,CACpD,EAELG,OAAQ,CAACP,KAAoBC,IAAgB,EAAAH,YAAYS,OAAOP,KAAYC,GAC5EO,mBAAqBR,GAAoB,EAAAF,YAAYU,mBAAmBR,IAE5ES,kBAAmB,IAAM,EAAAX,YAAYC,KAAK,kBAE1CW,kBAAoBC,GAAyC,EAAAb,YAAYI,GAAG,oBAAoB,CAACG,EAAQO,IAAcD,EAASC,KAChIC,mBAAqBF,GAAsC,EAAAb,YAAYI,GAAG,qBAAqB,CAACG,EAAQS,IAAaH,EAASG,KAC9HC,kBAAoBJ,GAAmC,EAAAb,YAAYI,GAAG,oBAAoB,CAACG,EAAQW,IAAOL,EAASK,KACnHC,4BAA8BN,GAAkC,EAAAb,YAAYI,GAAG,gCAAgC,CAACG,EAAQa,IAASP,EAASO,KAC1IC,yBAA2BR,GAAkC,EAAAb,YAAYI,GAAG,4BAA4B,CAACG,EAAQa,IAASP,EAASO,KACnIE,kBAAoBT,GAAsC,EAAAb,YAAYI,GAAG,oBAAoB,CAACG,EAAQgB,IAAaV,EAASU,KAE5HC,kBAAmB,CAACC,EAAaC,IAAkB,EAAA1B,YAAYS,OAAO,sBAAuBgB,EAAKC,GAClGC,yBAA0B,CAACF,EAAaC,IAAiB,EAAA1B,YAAYS,OAAO,8BAA+BgB,EAAKC,GAChHE,2BAA4B,CAACH,EAAaC,IAAiB,EAAA1B,YAAYS,OAAO,gCAAiCgB,EAAKC,GACpHG,cAAgBX,GAAe,EAAAlB,YAAYS,OAAO,iBAAkBS,GACpEY,eAAiBZ,GAAe,EAAAlB,YAAYS,OAAO,kBAAmBS,GACtEa,eAAiBb,GAAe,EAAAlB,YAAYS,OAAO,kBAAmBS,GACtEc,eAAiBd,GAAe,EAAAlB,YAAYS,OAAO,kBAAmBS,GACtEe,SAAWf,GAAe,EAAAlB,YAAYS,OAAO,YAAaS,GAC1DgB,WAAahB,GAAe,EAAAlB,YAAYS,OAAO,cAAeS,GAC9DiB,aAAejB,GAAe,EAAAlB,YAAYS,OAAO,iBAAkBS,GACnEkB,aAAc,IAAM,EAAApC,YAAYS,OAAO,iBACvC4B,cAAe,IAAM,EAAArC,YAAYS,OAAO,kBACxC6B,YAAcC,GAAqB,EAAAvC,YAAYS,OAAO,eAAgB8B,GACtEC,0BAA4BD,GAAqB,EAAAvC,YAAYS,OAAO,gCAAiC8B,GACrGE,oBAAqB,CAACF,EAAkBG,IAAiB,EAAA1C,YAAYS,OAAO,yBAA0B8B,EAAUG,GAChHC,wBAAyB,IAAM,EAAA3C,YAAYS,OAAO,8BAClDmC,aAAeC,GAAuB,EAAA7C,YAAYS,OAAO,gBAAiBoC,KAG9EjD,QAAQC,IAAI,kE","sources":["webpack://catchy/external node-commonjs \"electron\"","webpack://catchy/./src/main/preload.ts"],"sourcesContent":["const __WEBPACK_NAMESPACE_OBJECT__ = require(\"electron\");","// console.log('--- PRELOAD SCRIPT EXECUTION TEST ---');\n\n// Restore original preload script content\nimport { contextBridge, ipcRenderer } from 'electron';\n\nconsole.log('--- Preload script starting execution ---');\n\ncontextBridge.exposeInMainWorld('electron', {\n    ipcRenderer: {\n        send: (channel: string, ...args: any[]) => ipcRenderer.send(channel, ...args),\n        on: (channel: string, func: (...args: any[]) => void) => {\n            const subscription = (_event: any, ...args: any[]) => func(...args);\n            ipcRenderer.on(channel, subscription);\n            // Return a function to remove the listener\n            return () => {\n                ipcRenderer.removeListener(channel, subscription);\n            };\n        },\n        invoke: (channel: string, ...args: any[]) => ipcRenderer.invoke(channel, ...args),\n        removeAllListeners: (channel: string) => ipcRenderer.removeAllListeners(channel)\n    },\n    sendRendererReady: () => ipcRenderer.send('renderer-ready'),\n    // Add wrappers for other events if needed\n    onDownloadsLoaded: (callback: (downloads: any[]) => void) => ipcRenderer.on('downloads-loaded', (_event, downloads) => callback(downloads)),\n    onDownloadProgress: (callback: (download: any) => void) => ipcRenderer.on('download-progress', (_event, download) => callback(download)),\n    onDownloadRemoved: (callback: (id: string) => void) => ipcRenderer.on('download-removed', (_event, id) => callback(id)),\n    onShowDownloadConfirmDialog: (callback: (data: any) => void) => ipcRenderer.on('show-download-confirm-dialog', (_event, data) => callback(data)),\n    onDownloadDuplicateFound: (callback: (data: any) => void) => ipcRenderer.on('download-duplicate-found', (_event, data) => callback(data)),\n    onSettingsUpdated: (callback: (settings: any) => void) => ipcRenderer.on('settings-updated', (_event, settings) => callback(settings)),\n    // Add wrappers for invoke calls if desired, or call invoke directly from renderer\n    createNewDownload: (url: string, options?: any) => ipcRenderer.invoke('create-new-download', url, options),\n    confirmAndCreateDownload: (url: string, options: any) => ipcRenderer.invoke('confirm-and-create-download', url, options),\n    overwriteAndCreateDownload: (url: string, options: any) => ipcRenderer.invoke('overwrite-and-create-download', url, options),\n    pauseDownload: (id: string) => ipcRenderer.invoke('pause-download', id),\n    resumeDownload: (id: string) => ipcRenderer.invoke('resume-download', id),\n    cancelDownload: (id: string) => ipcRenderer.invoke('cancel-download', id),\n    removeDownload: (id: string) => ipcRenderer.invoke('remove-download', id),\n    openFile: (id: string) => ipcRenderer.invoke('open-file', id),\n    openFolder: (id: string) => ipcRenderer.invoke('open-folder', id),\n    showInFolder: (id: string) => ipcRenderer.invoke('show-in-folder', id),\n    selectFolder: () => ipcRenderer.invoke('select-folder'),\n    getCategories: () => ipcRenderer.invoke('get-categories'),\n    addCategory: (category: string) => ipcRenderer.invoke('add-category', category),\n    getDefaultPathForCategory: (category: string) => ipcRenderer.invoke('get-default-path-for-category', category),\n    savePathForCategory: (category: string, path: string) => ipcRenderer.invoke('save-path-for-category', category, path),\n    selectFolderForSettings: () => ipcRenderer.invoke('select-folder-for-settings'),\n    validatePath: (pathString: string) => ipcRenderer.invoke('validate-path', pathString)\n});\n\nconsole.log('--- Preload script finished execution, electron API exposed ---');"],"names":["require","console","log","contextBridge","exposeInMainWorld","ipcRenderer","send","channel","args","on","func","subscription","_event","removeListener","invoke","removeAllListeners","sendRendererReady","onDownloadsLoaded","callback","downloads","onDownloadProgress","download","onDownloadRemoved","id","onShowDownloadConfirmDialog","data","onDownloadDuplicateFound","onSettingsUpdated","settings","createNewDownload","url","options","confirmAndCreateDownload","overwriteAndCreateDownload","pauseDownload","resumeDownload","cancelDownload","removeDownload","openFile","openFolder","showInFolder","selectFolder","getCategories","addCategory","category","getDefaultPathForCategory","savePathForCategory","path","selectFolderForSettings","validatePath","pathString"],"sourceRoot":""}